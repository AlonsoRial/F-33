//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputMenuPause.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMenuPause: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMenuPause()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMenuPause"",
    ""maps"": [
        {
            ""name"": ""MenuPause"",
            ""id"": ""bfecd25d-16af-4973-8ac3-0fe4334e16eb"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""83c7df3a-c05f-497b-88f3-e404d676e473"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sumit"",
                    ""type"": ""Button"",
                    ""id"": ""50d1b499-8ea8-47e3-a472-c574713fb1c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""83456381-ba7f-4e93-8a2c-3554ee11627c"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/hat"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83752133-c08b-40c9-b5d0-aa620902aed3"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e62e677-33b8-4270-8744-67095645bf42"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sumit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0190c822-e3de-488b-9561-54df9ce0072b"",
                    ""path"": ""<HID::Nintendo Wireless Gamepad>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sumit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MenuPause
        m_MenuPause = asset.FindActionMap("MenuPause", throwIfNotFound: true);
        m_MenuPause_Movement = m_MenuPause.FindAction("Movement", throwIfNotFound: true);
        m_MenuPause_Sumit = m_MenuPause.FindAction("Sumit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MenuPause
    private readonly InputActionMap m_MenuPause;
    private List<IMenuPauseActions> m_MenuPauseActionsCallbackInterfaces = new List<IMenuPauseActions>();
    private readonly InputAction m_MenuPause_Movement;
    private readonly InputAction m_MenuPause_Sumit;
    public struct MenuPauseActions
    {
        private @InputMenuPause m_Wrapper;
        public MenuPauseActions(@InputMenuPause wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MenuPause_Movement;
        public InputAction @Sumit => m_Wrapper.m_MenuPause_Sumit;
        public InputActionMap Get() { return m_Wrapper.m_MenuPause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuPauseActions set) { return set.Get(); }
        public void AddCallbacks(IMenuPauseActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuPauseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuPauseActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Sumit.started += instance.OnSumit;
            @Sumit.performed += instance.OnSumit;
            @Sumit.canceled += instance.OnSumit;
        }

        private void UnregisterCallbacks(IMenuPauseActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Sumit.started -= instance.OnSumit;
            @Sumit.performed -= instance.OnSumit;
            @Sumit.canceled -= instance.OnSumit;
        }

        public void RemoveCallbacks(IMenuPauseActions instance)
        {
            if (m_Wrapper.m_MenuPauseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuPauseActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuPauseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuPauseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuPauseActions @MenuPause => new MenuPauseActions(this);
    public interface IMenuPauseActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSumit(InputAction.CallbackContext context);
    }
}
