//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/map.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Map : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Map()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""map"",
    ""maps"": [
        {
            ""name"": ""Drive"",
            ""id"": ""71886518-9f99-4e5b-9b54-246300660c21"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""daf36d2f-5785-477a-b4f1-7a74a574fbf7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""b6a4e576-5098-4ce9-9e48-a918e1d88340"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e8f7885c-a637-4c43-b95f-14f8c2313df3"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ps4Contro"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51341c7d-b11f-4d82-aedc-1d486944de09"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ps4Contro"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ps4Contro"",
            ""bindingGroup"": ""ps4Contro"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShock4GampadiOS>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Drive
        m_Drive = asset.FindActionMap("Drive", throwIfNotFound: true);
        m_Drive_Move = m_Drive.FindAction("Move", throwIfNotFound: true);
        m_Drive_Run = m_Drive.FindAction("Run", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Drive
    private readonly InputActionMap m_Drive;
    private IDriveActions m_DriveActionsCallbackInterface;
    private readonly InputAction m_Drive_Move;
    private readonly InputAction m_Drive_Run;
    public struct DriveActions
    {
        private @Map m_Wrapper;
        public DriveActions(@Map wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Drive_Move;
        public InputAction @Run => m_Wrapper.m_Drive_Run;
        public InputActionMap Get() { return m_Wrapper.m_Drive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DriveActions set) { return set.Get(); }
        public void SetCallbacks(IDriveActions instance)
        {
            if (m_Wrapper.m_DriveActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnMove;
                @Run.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnRun;
            }
            m_Wrapper.m_DriveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }
        }
    }
    public DriveActions @Drive => new DriveActions(this);
    private int m_ps4ControSchemeIndex = -1;
    public InputControlScheme ps4ControScheme
    {
        get
        {
            if (m_ps4ControSchemeIndex == -1) m_ps4ControSchemeIndex = asset.FindControlSchemeIndex("ps4Contro");
            return asset.controlSchemes[m_ps4ControSchemeIndex];
        }
    }
    public interface IDriveActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
}
